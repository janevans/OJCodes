#include<iostream>
#include<cstdio>
using namespace std;
char** newMatrix(int m,int n)
{
    char **matrix = new char*[m]();
    for(int i=0;i<m;i++) 
        matrix[i] = new char[n]();
    return matrix;
}
void deleteMatrix(char** matrix,int m,int n)
{
    for(int i=0;i<m;i++)//for(int i=0;i<n;i++)
        delete[] matrix[i];  
    delete[] matrix;
}
void fillMatrix(int m,int n,istream &is, char** matrix)
{
    char ch;
    for(int r=0;r<m;r++)
        for(int c=0;c<n;c++)
        {
            is>>ch;
            matrix[r][c] = tolower(ch); //forget the tolower(ch)
        }
}
bool checkWordByDirection(char** matrix, int r,int c, string &word, int rstep,int cstep)
{
    for(int i=0;i<word.length();i++)
    {
         if(matrix[r+i*rstep][c+i*cstep] != (char)tolower(word[i])) 
             return false;
    }
    return true;
}
/**
 * Be careful about int conversion to unsigned!!!
 */
bool matchWord(char** matrix,int m,int n,string &word,int r,int c){
    return 
             (
                 c+word.length() <= n &&          
                 checkWordByDirection(matrix,r,c,word,0,1)
             ) || (
                 r+word.length() <= m &&          
                 checkWordByDirection(matrix,r,c,word,1,0)
             )|| (
                 r+word.length() <= m &&  c+word.length()<=n && 
                 checkWordByDirection(matrix,r,c,word,1,1)
             )|| (
                 r+word.length() <= m &&  c-word.length()>=-1 &&
                 checkWordByDirection(matrix,r,c,word,1,-1)
             )|| (
                 c-(int)word.length() >= -1  &&         
                 checkWordByDirection(matrix,r,c,word,0,-1)
             )|| (
                 c-(int)word.length() >= -1 && r-word.length()>= -1 &&          
                 checkWordByDirection(matrix,r,c,word,-1,-1)
             )|| (
                 r-(int)word.length() >= -1 &&   
                 checkWordByDirection(matrix,r,c,word,-1,0)
             )|| (
                 r-(int)word.length() >= -1 && c+word.length()<=n &&          
                 checkWordByDirection(matrix,r,c,word,-1,1)
             );

}
void processQuery(int query,char** matrix,int m,int n,istream &in){
    for(int q=0;q<query;q++){
         string word;
         in>>word;
         for(int i=0;i<m;i++){
             int j=0;
             for(;j<n;j++){
                 if( matchWord(matrix,m,n,word,i,j) ){
                      cout<<i+1<<" "<<j+1<<endl; //cout<<i<<" "<<j<<endl;
                      break;
                 }
             }
             if(j<n) break;
        }
    }
    cout<<endl;
}


int main()
{
    int testcases=0;
    cin>>testcases;
    for(int i=1;i<=testcases;i++)
    {
        int m,n;
        cin>>m>>n;
        char** matrix = newMatrix(m,n);
        fillMatrix(m,n,cin,matrix);
        int query;
        cin>>query;
        processQuery(query,matrix,m,n,cin);
        deleteMatrix(matrix,m,n);
    }
    return 0;
}
